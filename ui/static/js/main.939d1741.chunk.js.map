{"version":3,"sources":["core/JBetaCorner.js","core/JConstants.js","core/JMenu.js","services/Tracking.js","core/JHome.js","core/JMonth.js","docs/JDocChoice.js","services/ApiV0.js","docs/JDocs.js","JApp.js","serviceWorker.js","index.js"],"names":["JBetaCorner","className","Component","JConstants","MENU","JMenu","props","onMenuClic","bind","menuEntry","category","action","label","ReactGA","event","Navbar","bg","expand","Brand","href","onClick","this","Toggle","aria-controls","Collapse","id","Nav","Link","JHome","JMonth","data","handleMonthsChange","console","log","board","fetch","then","res","json","forceUpdate","catch","months","bucket","ground","forEach","element","sowBucket","isBucket","elementBucket","includes","push","name","sowGround","isGround","elementGround","ToggleButtonGroup","type","defaultValue","onChange","ToggleButton","value","JDocChoice","Badge","variant","size","title","doc","nom","map","docType","index","key","ApiV0","onSuccess","onFailure","response","a","versionResponse","debug","ok","authError","options","queryString","objToQueryString","docsResults","error","details","message","status","Promise","reject","getError","obj","keyValuePairs","encodeURIComponent","join","JDocs","state","docs","errorMessage","infoMessage","searchDocs","getDocs","length","setState","getErrorMessage","Alert","JApp","trackingID","initialize","pageview","window","location","pathname","search","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.939d1741.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './JBetaCorner.css';\r\n\r\nclass JBetaCorner extends Component {\r\n  render() {\r\n    return (\r\n  <div className=\"corner-ribbon bottom-left sticky blue shadow\">Alpha</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JBetaCorner;\r\n","export const JConstants = {\r\n  GOOGLE_ANALYTICS_CODE: \"UA-1988442-19\",\r\n  GG_CATEGORY: {\r\n    MENU: \"MENU\"\r\n  }\r\n};","import React, { Component } from 'react'\r\nimport './JMenu.css';\r\nimport { Navbar, Nav} from 'react-bootstrap';\r\n// import { Navbar, Nav, Form, FormControl, Button} from 'react-bootstrap';\r\nimport {JConstants} from './JConstants'\r\nimport {Event} from '../services/Tracking';\r\n\r\n\r\nclass JMenu extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.onMenuClic = this.onMenuClic.bind(this);\r\n  }\r\n\r\n  onMenuClic(menuEntry) {\r\n    Event(JConstants.GG_CATEGORY.MENU, menuEntry, \"Menu clic on \" + menuEntry)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand href=\"/\" onClick={this.onMenuClic('logo')}>JardiCal</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"/documents\" onClick={this.onMenuClic('entrées')}>Entrées</Nav.Link>\r\n            {/* <Nav.Link href=\"/month\">Par mois</Nav.Link> */}\r\n          </Nav>\r\n          {/*\r\n          <Form inline>\r\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n            <Button variant=\"outline-success\">Search</Button>\r\n          </Form>\r\n          */}\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default JMenu;\r\n/*\r\n            <div>\r\n              <ul className=\"jmenu\">\r\n                  <li><NavLink activeClassName={\"active\"} exact={true}  to=\"/\">Home</NavLink></li>\r\n                  <li><NavLink activeClassName={\"active\"} to=\"/month\">Par mois</NavLink></li>\r\n                </ul>\r\n            </div>\r\n*/","/**\r\n * credit: https://medium.com/@malith.dev/track-users-in-your-react-app-with-google-analytics-6364ebfcbae8\r\n */\r\nimport ReactGA from \"react-ga\";\r\n\r\nexport const initGA = (trackingID) => {\r\n   ReactGA.initialize(trackingID);\r\n}\r\n\r\nexport const PageView = () => {\r\n    ReactGA.pageview(window.location.pathname +\r\n                     window.location.search);\r\n}\r\n\r\n/**\r\n * Event - Add custom tracking event.\r\n * @param {string} category\r\n * @param {string} action\r\n * @param {string} label\r\n */\r\nexport const Event = (category, action, label) => {\r\n  ReactGA.event({\r\n    category: category,\r\n    action: action,\r\n    label: label\r\n  });\r\n};","import React, { Component } from 'react'\r\n\r\nclass JHome extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"jhome\">\r\n        <h1>JardiCal</h1>\r\n        <p>\r\n        Retrouvez quand planter quoi, et quand récolter !\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JHome;","import React, { Component } from 'react'\r\nimport { ToggleButtonGroup, ToggleButton} from 'react-bootstrap';\r\n\r\nclass JMonth extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.data = \"\";\r\n\r\n    this.handleMonthsChange = this.handleMonthsChange.bind(this);\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    if (this.data !== \"\") {\r\n      return;\r\n    }\r\n    console.log(\"fetch json\");\r\n      var board = this;\r\n      fetch('/garden.json')\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n              board.data = data;\r\n              console.log(\"data\", data);\r\n              this.forceUpdate();\r\n            })\r\n            .catch(console.log)\r\n  }\r\n\r\n\r\n  handleMonthsChange(months) {\r\n    console.log('handleMonthsChange', months);\r\n    this.bucket = [];\r\n    this.ground = [];\r\n    this.data.forEach(element => {\r\n      if (element.sowBucket) {\r\n        var isBucket = false;\r\n        element.sowBucket.forEach(elementBucket => {\r\n            if (months.includes(elementBucket)) {\r\n                isBucket = true;\r\n            }\r\n        })\r\n        if (isBucket) {\r\n            this.bucket.push(element.name);\r\n        }\r\n      }\r\n      if (element.sowGround) {\r\n        var isGround = false;\r\n        element.sowGround.forEach(elementGround => {\r\n            if (months.includes(elementGround)) {\r\n                isGround = true;\r\n            }\r\n        })\r\n        if (isGround) {\r\n            this.ground.push(element.name);\r\n        }\r\n      }\r\n    });\r\n    this.forceUpdate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"jmonth\">\r\n       <div className=\"selectMonth\">\r\n        <h1>Par mois</h1>\r\n        <p>\r\n        Choisissez un ou plusieurs mois\r\n        </p>\r\n          <ToggleButtonGroup type=\"checkbox\" defaultValue={[]}\r\n            className=\"mb-2\"\r\n            onChange={this.handleMonthsChange}>\r\n            <ToggleButton value={1}>Janvier</ToggleButton>\r\n            <ToggleButton value={2}>Février</ToggleButton>\r\n            <ToggleButton value={3}>Mars</ToggleButton>\r\n            <ToggleButton value={4}>Avril</ToggleButton>\r\n            <ToggleButton value={5}>Mai</ToggleButton>\r\n            <ToggleButton value={6}>Juin</ToggleButton>\r\n            <ToggleButton value={7}>Juillet</ToggleButton>\r\n            <ToggleButton value={8}>Août</ToggleButton>\r\n            <ToggleButton value={9}>Septembre</ToggleButton>\r\n            <ToggleButton value={10}>Octobre</ToggleButton>\r\n            <ToggleButton value={11}>Novembre</ToggleButton>\r\n            <ToggleButton value={12}>Décembre</ToggleButton>\r\n          </ToggleButtonGroup>\r\n       </div>\r\n       <div className=\"showMonth\">\r\n           Semis en godets : { this.bucket }<br/>\r\n           Semis en pleine terre : { this.ground }<br/>\r\n       </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JMonth;","import React, { Component } from 'react'\r\nimport { Badge } from 'react-bootstrap';\r\nimport { GiFireFlower, GiPear, GiCarrot, GiHighGrass } from 'react-icons/gi'; // https://react-icons.github.io/react-icons/icons?name=gi\r\n\r\nclass JDocChoice extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"doc-choice\" >\r\n        {/*\r\n        <Button variant=\"secondary\" size=\"sm\">\r\n          {this.props.index} - {this.props.doc.nom} - ({this.props.doc.type})\r\n        </Button>\r\n\r\n        badge doc: https://react-bootstrap.github.io/components/badge/#badge-props\r\n        */}\r\n        <Badge variant=\"success\" size=\"sm mr-2 mt-2\" title={this.props.doc.type}>\r\n          {this.props.doc.nom}\r\n          &#160;\r\n          { this.props.doc.type.map( (docType, index) => {\r\n              if (docType === \"fleur\") {\r\n                return ( <GiFireFlower key={index} />)\r\n              }\r\n              if (docType === \"fruit\") {\r\n                return ( <GiPear key={index} />)\r\n              }\r\n              if (docType === \"légume\") {\r\n                return ( <GiCarrot key={index} />)\r\n              }\r\n              return ( <GiHighGrass key={index} />)\r\n            }) }\r\n        </Badge>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JDocChoice;\r\n//onClick={(e) => this.props.onChoice(this.props.index, e)}","class ApiV0 {\r\n  static debug = false;\r\n\r\n  static version(onSuccess, onFailure) {\r\n    fetch('/version')\r\n      .then(async response => {\r\n          var versionResponse = null;\r\n          try {\r\n            versionResponse = await response.json();\r\n            if (ApiV0.debug) {\r\n              console.log(\"RESPONSE\", versionResponse);\r\n            }\r\n          } catch (jsonException) {\r\n          }\r\n          if (!response.ok) {\r\n            onFailure();\r\n            return;\r\n          }\r\n          onSuccess(versionResponse);\r\n      })\r\n      .catch((authError) => {\r\n        if (ApiV0.debug) {\r\n          console.log(\"ERR\", authError);\r\n        }\r\n        onFailure(authError)\r\n      });\r\n  }\r\n\r\n  static getDocs(options, onSuccess, onFailure) {\r\n    const queryString = ApiV0.objToQueryString(options);\r\n    fetch(`/api/v0/docs?${queryString}`)\r\n    .then(async response => {\r\n      const docsResults = await response.json();\r\n      if (ApiV0.debug) {\r\n        console.log(\"RESPONSE\", docsResults);\r\n      }\r\n      // check for error response\r\n      if (!response.ok) {\r\n        // get error message from body or default to response status\r\n        const error = (docsResults && docsResults.details) || (docsResults && docsResults.message) || response.status;\r\n        return Promise.reject(error);\r\n      }\r\n      onSuccess(docsResults);\r\n    })\r\n    .catch((getError) => {\r\n      if (ApiV0.debug) {\r\n        console.log(\"ERR\", getError);\r\n      }\r\n      onFailure(getError);\r\n    })\r\n  }\r\n\r\n  static objToQueryString(obj) {\r\n    const keyValuePairs = [];\r\n    for (const key in obj) {\r\n      keyValuePairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\r\n    }\r\n    return keyValuePairs.join('&');\r\n  }\r\n\r\n}\r\n\r\nexport default ApiV0;","import React, { Component } from 'react'\r\nimport { Alert } from 'react-bootstrap';\r\nimport JDocChoice from './JDocChoice';\r\nimport ApiV0 from '../services/ApiV0'\r\n\r\nclass JDocs extends Component {\r\n  state = {\r\n      docs: null,\r\n      errorMessage: null,\r\n      infoMessage: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"fetch json\");\r\n    this.searchDocs();\r\n  }\r\n\r\n  searchDocs() {\r\n    var filter = {\"limit\":10};\r\n    ApiV0.getDocs(filter,\r\n         (docsResults) => {\r\n           if (docsResults.length) {\r\n               this.setState({\r\n                 docs: docsResults,\r\n                 errorMessage: null,\r\n                 infoMessage: null\r\n               })\r\n           } else {\r\n               this.setState({\r\n                 infoMessage: \"aucun résultat\"\r\n               })\r\n           }\r\n         },\r\n         (getErrorMessage) => {\r\n             this.setState({errorMessage: getErrorMessage})\r\n         }\r\n     );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"jdocs\">\r\n       <div className=\"docsList\">\r\n        { this.state.errorMessage ?\r\n            ( <Alert variant=\"warning\">\r\n                {this.state.errorMessage}\r\n              </Alert> )\r\n            : ( null)\r\n        }\r\n        { this.state.infoMessage ?\r\n            ( <Alert variant=\"info\">\r\n                {this.state.infoMessage}\r\n              </Alert> )\r\n            : ( null)\r\n        }\r\n\r\n        <h1>Entrées</h1>\r\n        <p>\r\n        Entrées liées au jardin\r\n        </p>\r\n        { this.state.docs && this.state.docs.length ?\r\n          ( <div>\r\n            { this.state.docs.map( (doc, index) => { return( <JDocChoice key={index} index={index} doc={doc}/>) }) }\r\n            </div>\r\n          ) :\r\n          ( null )\r\n        }\r\n       </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default JDocs;","import React, { Component } from 'react'\nimport './JApp.css';\nimport JBetaCorner from './core/JBetaCorner';\nimport JMenu from './core/JMenu';\nimport JHome from './core/JHome';\nimport JMonth from './core/JMonth';\nimport JDocs from './docs/JDocs';\nimport {JConstants} from './core/JConstants'\nimport {PageView, initGA} from './services/Tracking';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass JApp extends Component {\n  componentDidMount() {\n    initGA(JConstants.GOOGLE_ANALYTICS_CODE);\n    PageView();\n  }\n\n  render() {\n    return (\n     <Router>\n      <JBetaCorner/>\n      <div className=\"app\">\n        <div className=\"JMenu\"><JMenu /></div>\n        <div className=\"JContent\">\n          <Switch>\n            <Route exact path=\"/\" component={() => <JHome />} />\n            <Route exact path=\"/month\" component={() => <JMonth />} />\n            <Route exact path=\"/documents\" component={() => <JDocs />} />\n          </Switch>\n        </div>\n      </div>\n     </Router>\n    );\n  }\n}\n\nexport default JApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JApp from './JApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <JApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}